generator client {
  provider      = "prisma-client-js"
  output        = "generated/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model DogOwner {
  id              String           @id @default(uuid())
  email           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  unregisterdAt   DateTime?
  cognitoSub      String
  dogOwnerProfile DogOwnerProfile?
  dogs            Dog[]
}

model Dog {
  id        String    @id @default(uuid())
  nickname  String    @db.VarChar(50)
  breedId   String
  birthArea String
  birthdate DateTime?

  ownerId           String? 
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  unregisterdAt     DateTime?
  profileImagePath  String?
  owner             DogOwner?         @relation(fields: [ownerId], references: [id])
  breed             DogBreed         @relation(fields: [breedId], references: [id])
  diaries           Diary[]
  DogOwnerProfile   DogOwnerProfile? @relation(fields: [dogOwnerProfileId], references: [id])
  dogOwnerProfileId String?

  @@index([ownerId]) // ownerIdのための単一のインデックス
  @@index([breedId]) // breedIdのための単一のインデックス
  @@index([dogOwnerProfileId])
  @@index([breedId, ownerId]) // 複合インデックス
}

model DogBreed {
  id               String   @id @default(uuid())
  name             String   @unique
  country          Country  @default(JAPAN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  profileImagePath String?
  dogs             Dog[]
}

model DogOwnerProfile {
  id               String   @id @default(uuid())
  name             String
  bio              String?  @db.VarChar(200)
  profileImagePath String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  dogOwnerId       String   @unique
  contactInfo      String?
  dogOnwer         DogOwner @relation(fields: [dogOwnerId], references: [id])
  dogs             Dog[]

  @@index([dogOwnerId])
}

model Diary {
  id             String      @id @default(uuid())
  title          String      @db.VarChar(100)
  description    String      @db.VarChar(1000)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  unregisterdAt  DateTime?
  dogId          String      @unique
  coverImagePath String?
  dog            Dog         @relation(fields: [dogId], references: [id])
  entries        WalkEntry[]
}

model WalkEntry {
  id               String      @id @default(uuid())
  title            String      @default("")
  date             DateTime
  description String?
  stepCount        Float?
  duration         Int?
  diaryId          String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  unregisterdAt    DateTime?
  summaryImagePath String?
  diary            Diary       @relation(fields: [diaryId], references: [id])
  excraments       Excrement[]

  @@index([diaryId])
}

model Excrement {
  id                 String          @id @default(uuid())
  count              Int?            @default(0)
  type               ExcrementType   @default(PIPI)
  size               ExcrementSize   @default(SHORT)
  volume             ExcrementVolume @default(DROP)
  excramentImagePath String?
  walkEntryId        String
  walkEntry          WalkEntry       @relation(fields: [walkEntryId], references: [id])

  @@index([walkEntryId])
}

enum Country {
  JAPAN
  FRANCE
}

enum ExcrementType {
  PIPI
  CACA
}

enum ExcrementSize {
  LARGE
  MEDIUM
  SHORT
}

enum ExcrementVolume {
  WATERFALL
  DROP
}
